/*

Task description
A zero-indexed array A consisting of N integers is given. Rotation of the array means that each element is shifted right by one index, and the last element of the array is also moved to the first place.

For example, the rotation of array A = [3, 8, 9, 7, 6] is [6, 3, 8, 9, 7]. The goal is to rotate array A K times; that is, each element of A will be shifted to the right by K indexes.

Write a function:

class Solution { public int[] solution(int[] A, int K); }
that, given a zero-indexed array A consisting of N integers and an integer K, returns the array A rotated K times.

For example, given array A = [3, 8, 9, 7, 6] and K = 3, the function should return [9, 7, 6, 3, 8].

Assume that:

N and K are integers within the range [0..100];
each element of array A is an integer within the range [âˆ’1,000..1,000].
In your solution, focus on correctness. The performance of your solution will not be the focus of the assessment.




*/

using System;
// you can also use other imports, for example:
// using System.Collections.Generic;

// you can write to stdout for debugging purposes, e.g.
// Console.WriteLine("this is a debug message");

class Solution {
    public int[] solution(int[] A, int K) {
        // write your code in C# 6.0 with .NET 4.5 (Mono)
        int[] temp = A;
        int len = temp.Length;
        
        if(K>len && len!=0){
            //K is greater than len
            int mod = K%len;
            temp = shift(A, mod);                
        }
        else{
            //K is less than given length
            temp = shift(A, K);
        }
        
        return temp;
    }
    
    public int[] shift(int[] A, int K){
        int[] temp_arr = new int[A.Length];
        int[] temp_rot = new int[A.Length];
        for(int i =0; i<A.Length; i++){
            temp_arr[i] = A[i];    
        }
        for(int j=0; j<temp_arr.Length; j++){
            int index = j+K;
            if(index < temp_arr.Length){
                temp_rot[j+K] = temp_arr[j];        
            }else{
                temp_rot[index-temp_arr.Length] = temp_arr[j];    
            }
        }
        return temp_rot;
    }
}
